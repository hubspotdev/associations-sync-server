# Associations Mappings Server

An Express.js application that provides seamless integration with HubSpot for managing associations between CRM objects. It handles creation, retrieval, deletion, and mapping of associations and their definitions while enabling OAuth-based authentication with HubSpot.

## Table of Contents
- [What this project does](#what-this-project-does)
- [Why is this project useful](#why-is-this-project-useful)
- [Getting started with the project](#getting-started-with-the-project)
  - [Setup](#setup)
- [Endpoints](#endpoints)
  - [Associations Endpoints](#associations-endpoints)
  - [Mappings Endpoints](#mappings-endpoints)
  - [Definitions Endpoints](#definitions-endpoints)
- [Available Scripts](#available-scripts)
- [Dependencies](#dependencies)
  - [Core](#core)
  - [Development](#development)
- [Where to get help?](#where-to-get-help)
- [Who maintains and contributes to this project](#who-maintains-and-contributes-to-this-project)
- [License](#license)

## What this project does

This application provides a solution for integrating with HubSpot to manage associations between various CRM objects. It handles the creation, retrieval, deletion, and mapping of associations and definitions.

**Key concepts**:
- Associations in HubSpot refer to the connections or relationships between different CRM objects. For instance, a contact can be associated with a company, a deal, or a custom object
- Association mapping refers to the mapping of HubSpot objects to a local database
- Association definition involves specifying the nature and characteristics of the association between objects

## Why is this project useful

- **Use an external OAuth service for HubSpot authentication**:
  - Integrates with the [HubSpot OAuth Service](https://github.com/hubspotdev/oauth-service/tree/containerization) for secure token management
  - Handles OAuth 2.0 processes including initial installation and token refresh
  - Stores OAuth refresh and access tokens in a dedicated PostgreSQL database
- **Comprehensive API Management**: Provides endpoints for managing associations and definitions between CRM objects, allowing for complex relationship handling
- **Data Consistency**: Ensures data consistency across platforms by handling interactions with both a local database and HubSpot

## Getting started with the project:

### Setup:

1. Clone the repo

2. If you haven't done so yet, please make sure to install [Docker](https://www.docker.com/get-started/) on your local environment.

3. Create two environment files (see .env.example and oauth-service.env.example):

   a. `.env` file for the main application:
   ```
   DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
   POSTGRES_USER=postgres
   POSTGRES_PASSWORD=postgres
   POSTGRES_DB=hubspot_sync
   OAUTH_SERVICE_URL=http://oauth-service:3001
   ```

   b. `oauth-service.env` file for the OAuth service:
   ```
   CLIENT_ID=your_client_id
   CLIENT_SECRET=your_client_secret
   DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@oauth-db:5432/${POSTGRES_DB}
   SCOPES=crm.objects.companies.read crm.objects.companies.write crm.objects.contacts.read crm.objects.contacts.write crm.objects.deals.read crm.objects.deals.write

   POSTGRES_USER=postgres
   POSTGRES_PASSWORD=postgres
   POSTGRES_DB=oauth_service
   ```

4. Build and run the application:
```bash
# For development:
docker-compose up --build

# For production:
docker-compose -f docker-compose.yml up --build
```

5. Initialize OAuth token:
   - Visit `http://localhost:3001/install`
   - Click the authorization link
   - Complete the HubSpot OAuth flow
   - A token will be stored with customerId="1"

6. Optional - Seed the databse, important:
  - available only in development mode
  - requires INDUSTRY in .env
  - requires completed OAuth flow and generated token
```bash
  docker-compose --profile seed up
```

## Endpoints:

### Associations Endpoints
These endpoints manage basic associations between objects:

- `GET /api/associations/{associationId}`
  - Purpose: Retrieves a specific association
  - Data Source: Local database (Prisma)
  - Used for: Getting details of a single association between objects

- `POST /api/associations`
  - Purpose: Creates a new association
  - Data Modified: Local database only
  - Used for: Creating new relationships between objects

- `DELETE /api/associations/{associationId}`
  - Purpose: Deletes an association
  - Data Modified: Local database and related mappings
  - Used for: Removing relationships between objects

- `GET /api/associations/all`
  - Purpose: Retrieves all associations
  - Data Source: Local database
  - Used for: Getting a complete list of all associations

## Mappings Endpoints
These endpoints handle the mapping between local and HubSpot associations:

- `POST /api/associations/mappings`
  - Purpose: Creates a single association mapping
  - Data Modified: Both local database and HubSpot
  - Used for: Syncing a single association between local system and HubSpot

- `POST /api/associations/mappings/batch`
  - Purpose: Creates multiple association mappings
  - Data Modified: Both local database and HubSpot
  - Used for: Bulk syncing associations between systems

- `DELETE /api/associations/mappings/batch`
  - Purpose: Deletes multiple mappings
  - Data Modified: Local database
  - Used for: Bulk removal of association mappings

- `GET /api/associations/mappings/all`
  - Purpose: Retrieves all mappings
  - Data Source: Local database
  - Used for: Getting a complete list of all association mappings

- `DELETE /api/associations/mappings/basic/{mappingId}`
  - Purpose: Deletes a single mapping
  - Data Modified: Local database
  - Used for: Removing a specific association mapping

- `GET /api/associations/mappings/basic/{mappingId}`
  - Purpose: Retrieves a single mapping
  - Data Source: Local database
  - Used for: Getting details of a specific association mapping

## Definitions Endpoints
These endpoints manage the structure and rules of associations:

- `GET /api/associations/definitions/{fromObject}/{toObject}`
  - Purpose: Retrieves association definitions
  - Data Source: Both local database and HubSpot
  - Used for: Getting the rules and structure of associations between specific object types

- `POST /api/associations/definitions`
  - Purpose: Creates a new association definition
  - Data Modified: Both local database and HubSpot
  - Used for: Defining new types of associations between objects

- `DELETE /api/associations/definitions/{associationDefinitionId}`
  - Purpose: Deletes an association definition
  - Data Modified: Both local database and HubSpot
  - Used for: Removing association type definitions

- `PUT /api/associations/definitions/{id}`
  - Purpose: Updates an existing association definition
  - Data Modified: Both local database and HubSpot
  - Used for: Modifying the rules and structure of existing association types

## Available Scripts
- `docker-compose up --build` - Build and start all services in development mode
- `docker-compose -f docker-compose.yml up --build` - Build and start all services in production mode
- `docker-compose --profile seed up --build` - Build and start services with seeding enabled (requires INDUSTRY in .env)
- `docker-compose down` - Stop and remove all services
- `docker-compose down -v` - Stop and remove all services and volumes
- `docker-compose exec app npm test` - Run test suite
- `docker-compose exec app npm run test:watch` - Run tests in watch mode
- `docker-compose exec app npm run test:coverage` - Generate test coverage report

## Dependencies
### Core
- @hubspot/api-client (12.0.1) - HubSpot API integration
- @prisma/client (^3.15.2) - Database ORM
- express (^4.17.1) - Web framework
- swagger-ui-express (^5.0.1) - API documentation
- swagger-jsdoc (^6.2.8) - API documentation
- swagger-ui (^5.18.2) - API documentation
- dotenv (^16.0.1) - Environment configuration
- axios (^0.27.2) - HTTP client
- form-data (^4.0.0) - Form data handling
- inquirer (^9.3.7) - Interactive command line interface

### Development
- typescript (^4.1.3) - Programming language
- jest (^29.7.0) - Testing framework
- prisma (^4.1.0) - Database toolkit
- nodemon (^2.0.7) - Development server
- supertest (^7.0.0) - API testing
- eslint (^8.57.1) - Code linting
- ts-node (^10.9.1) - TypeScript execution
- @types/* - TypeScript type definitions
- prettier-plugin-prisma (^3.14.0) - Prisma formatting
- ts-jest (^29.2.5) - TypeScript testing
- tsx (^4.19.2) - TypeScript execution

## Where to get help?
If you encounter any bugs or issues, please report them by opening a GitHub issue. For feedback or suggestions for new code examples, we encourage you to use this [form](https://survey.hsforms.com/1RT0f09LSTHuflzNtMbr2jA96it).

## Who maintains and contributes to this project
Various teams at HubSpot that focus on developer experience and app marketplace quality maintain and contribute to this project. In particular, this project was made possible by @therealdadams, @rahmona-henry, @zman81988, @natalijabujevic0708, and @zradford

## License
MIT
