# Associations Mappings Server

An Express.js application that provides seamless integration with HubSpot for managing associations between CRM objects. It handles creation, retrieval, deletion, and mapping of associations and definitions while enabling OAuth-based authentication with HubSpot.

## Table of Contents
- [Setup](#setup)
- [Scopes](#scopes)
- [Endpoints](#endpoints)
  - [Authentication](#authentication)
  - [Associations](#associations)
  - [Mappings](#mappings)
  - [Definitions](#definitions)
- [Available Scripts](#available-scripts)
- [Project Structure](#project-structure)
- [Dependencies](#dependencies)
  - [Core](#core)
  - [Development](#development)
- [License](#license)

## Setup

1. **Prerequisites**
- PostgreSQL installed and running
- Empty database created
- Default username: postgres (no password)

2. **Install Dependencies**
```bash
npm install
```

3. **Environment Variables**
Create a `.env` file in the root directory with the following variables:
DATABASE_URL=your_database_url
CLIENT_ID=your_hubspot_client_id
CLIENT_SECRET=your_hubspot_client_secret


4. **Additional Setup Steps**
- Add `localhost:3001/api/install/oauth-callback` as a redirect URL in your HubSpot public app
- Run `npm run dev` to start the server
- Visit `http://localhost:3001/api/install` to initiate OAuth flow
- Run `npm run seed` to seed the database with test data

## Scopes

'crm.objects.companies.read',
'crm.objects.companies.write',
'crm.objects.contacts.read',
'crm.objects.contacts.write',
'crm.objects.deals.read',
'crm.objects.deals.write',
'oauth'


## Endpoints

### Authentication
- `GET /api/install` - Redirects to HubSpot's OAuth authorization
- `GET /api/install/oauth-callback` - Handles OAuth token exchange

### Associations
- `GET /api/associations/{associationId}` - Retrieves a specific association
- `POST /api/associations` - Creates a new association
- `DELETE /api/associations/{associationId}` - Deletes an association

### Mappings
- `POST /api/associations/mappings` - Creates a single mapping
- `POST /api/associations/mappings/batch` - Creates multiple mappings
- `DELETE /api/associations/mappings/batch` - Deletes multiple mappings
- `GET /api/associations/mappings/all` - Retrieves all mappings
- `DELETE /api/associations/mappings/basic/{mappingId}` - Deletes a single mapping
- `GET /api/associations/mappings/basic/{mappingId}` - Retrieves a single mapping

### Definitions
- `GET /api/associations/definitions/{fromObject}/{toObject}` - Retrieves definitions
- `POST /api/associations/definitions` - Creates a definition
- `DELETE /api/associations/definitions/{associationId}` - Deletes a definition
- `PUT /api/associations/definitions/{id}` - Updates a definition

## Available Scripts

- `npm run dev` - Start development server with hot reload
- `npm run prod` - Start production server
- `npm start` - Start the production server
- `npm run build` - Build TypeScript files
- `npm run seed` - Run industry setup script
- `npm run db-init` - Initialize database schema
- `npm test` - Run test suite with coverage
- `npm run test:routes` - Run route tests only
- `npm run test:watch` - Run tests in watch mode
- `npm run test:coverage-report` - Generate and open coverage report
- `npm run test:ci` - Run tests in CI environment

## Project Structure


/src
/tests - Test files
/prisma - Database models and client
/routes - API routes
/services - Business logic
/swagger - API documentation
/utils - Helper functions


## Dependencies

### Core
- @hubspot/api-client - HubSpot API integration
- @prisma/client - Database ORM
- express - Web framework
- swagger-ui-express - API documentation
- dotenv - Environment configuration

### Development
- typescript - Programming language
- jest - Testing framework
- prisma - Database toolkit
- nodemon - Development server
- supertest - API testing
- eslint - Code linting
- ts-node - TypeScript execution

## License

ISC
